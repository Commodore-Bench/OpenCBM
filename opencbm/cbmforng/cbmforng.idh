_CMT(" /*                                                                          ")
_CMT("  * cbmformat.o65 - 6502 based fast formatting routine with probing for      ")
_CMT("  *                 the Commodore 1541 floppy disk drive and compatibles     ")
_CMT("  *                                                                          ")
_CMT("  * Copyright (C) 2005,2006 Wolfgang Moser <cbm(a)d81(o)de>                  ")
_CMT("  *                                                                          ")
_CMT("  * This library is free software; you can redistribute it and/or            ")
_CMT("  * modify it under the terms of the GNU Lesser General Public               ")
_CMT("  * License as published by the Free Software Foundation; either             ")
_CMT("  * version 2.1 of the License, or (at your option) any later version.       ")
_CMT("  */                                                                         ")
_CMT("                                                                             ")
_CMT("                                                                             ")
_CMT(" Interface description header of the fast formatting routine parameter       ")
_CMT(" block, including the 5 byte GCR patterns that describe the format pattern   ")
_CMT(" generation of the data blocks.                                              ")
_CMT("                                                                             ")
_CMT(" To include this file within a C or C++ source file, write a wrapper header  ")
_CMT(" file, copy over the following 18 lines and include it into your source:     ")
_CMT("                                                                             ")
_CMT("     #ifndef __CBMFORNG_INTERFACE_DESCFRIPTION_HEADER_INCLUDE_               ")
_CMT("     #define __CBMFORNG_INTERFACE_DESCFRIPTION_HEADER_INCLUDE_               ")
_CMT("                                                                             ")
_CMT("     #define _CMT(str)                                                       ")
_CMT("     #define _BEGINSTRUCT(parm)      struct parm {                           ")
_CMT("     #define _ENDSTRUCT()            };                                      ")
_CMT("     #define _OCTETARRAY(name, size) unsigned char name[size];               ")
_CMT("     #define _OCTETDECL(name)        unsigned char name;                     ")
_CMT("                                                                             ")
_CMT("     #include ''cbmforng.idh''                                               ")
_CMT("                                                                             ")
_CMT("     #undef _CMT                                                             ")
_CMT("     #undef _BEGINSTRUCT                                                     ")
_CMT("     #undef _ENDSTRUCT                                                       ")
_CMT("     #undef _OCTETARRAY                                                      ")
_CMT("     #undef _OCTETDECL                                                       ")
_CMT("                                                                             ")
_CMT("     #endif                                                                  ")
_CMT("                                                                             ")
_CMT("                                                                             ")
_CMT(" This parameter block needs to be set up and then send to the floppy         ")
_CMT(" disk drive's RAM at location $0200-.sizeof(FormatParameters). While         ")
_CMT(" the last six bytes are parameters controlling some features of the          ")
_CMT(" formatter, the first six 5 byte blocks are GCR encoded parts of the         ")
_CMT(" format patters that have to written to disk.                                ")
_CMT("                                                                             ")
_CMT(" For the following data structures (and the implementation of the            ")
_CMT(" formatter) it is assumed that the data block parts of each sector           ")
_CMT(" are filled uniformly. Before the start of each data block a marker          ")
_CMT(" byte of $07 is following the SYNC mark. Furthermore to correctly            ")
_CMT(" ''emulate'' the original Commodore format pattern the very first            ")
_CMT(" byte of each data block differs from all remaining bytes. At the            ")
_CMT(" end of each data block, a checksum byte is following which differs          ")
_CMT(" from the uniform fill pattern. Furthermore two filler bytes with            ")
_CMT(" a value of $00 complete a raw sector.                                       ")
_CMT(" Because of these differences, three 5 byte GCR pattern blocks are           ")
_CMT(" maintained within the structure. One for the beginning of the data          ")
_CMT(" block, then a pattern that is repeated 63 times, when writing a             ")
_CMT(" data block and a 5 byte pattern block for writing the end.                  ")
_CMT(" With the original Commodore 1541 disk format, the beginning of a            ")
_CMT(" data block differs on track 1 and because of another checksum also          ")
_CMT(" its end. To successfully generate all the data block patterns on the        ")
_CMT(" host side, do the following steps (e.g. Commodore 1541 disk format):        ")
_CMT("                                                                             ")
_CMT("     - fill a 4 byte buffer with:  $01 $01 $01 $01                           ")
_CMT("     - GCR convert that buffer into a 5 byte pattern and store it to CDBGIMT ")
_CMT("                                                                             ")
_CMT("     - fill a 4 byte buffer with:  $07 $4b $01 $01                           ")
_CMT("     - GCR convert that buffer into a 5 byte pattern and store it to CDBGSTN ")
_CMT("                                                                             ")
_CMT("     - fill a 4 byte buffer with:  $07 $00 $01 $01                           ")
_CMT("     - GCR convert that buffer into a 5 byte pattern and store it to CDBGST1 ")
_CMT("                                                                             ")
_CMT("     - fill a 4 byte buffer with:  $01 $01 $00 $00  ($01 = $00 EXOR $01)     ")
_CMT("     - GCR convert that buffer into a 5 byte pattern and store it to CDBGEN1 ")
_CMT("                                                                             ")
_CMT("     - fill a 4 byte buffer with:  $01 $4a $00 $00  ($4a = $4b EXOR $01)     ")
_CMT("     - GCR convert that buffer into a 5 byte pattern and store it to CDBGENN ")
_CMT("                                                                             ")
_CMT(" The last 5 byte pattern describes the second 5 byte GCR part of             ")
_CMT(" each sector header of the disk beeing formatted. While the first            ")
_CMT(" sector header parts are created just in time, the second part can           ")
_CMT(" be precreated, since it is constant for the whole disk. It consists         ")
_CMT(" of the second and then the first disk header ID, followed by two            ")
_CMT(" filler bytes of $0f, all encoded to GCR. To create it on host side          ")
_CMT(" do:                                                                         ")
_CMT("                                                                             ")
_CMT("     - fill a 4 byte buffer with:  HID2 HID1 $0f $0f                         ")
_CMT("     - GCR convert that buffer into a 5 byte pattern and store it to CHDR2ND ")
_CMT("                                                                             ")
_CMT(" Take note that the bytes HID1 and HID2 must be the very same values         ")
_CMT(" that are send to the disk drive, when starting the format code and          ")
_CMT(" sending the disk's name as well as the format ID (the both header           ")
_CMT(" IDs).                                                                       ")
_CMT("                                                                             ")
_CMT(" Example for executing the uploaded formatting routine after the             ")
_CMT(" parameter block was transmitted also:                                       ")
_CMT("                                                                             ")
_CMT("     ''M-E''+CHR$(3)+CHR$(3)+''0:DISKNAME,ID''                               ")
_CMT("                                                                             ")

_BEGINSTRUCT(FormatParameters)                                                   
    _OCTETARRAY(CDBGIMT, 5) _CMT(" intermediate section of data block                 ")
    _OCTETARRAY(CDBGSTN, 5) _CMT(" start of data block for tracks 2 to 40             ")
    _OCTETARRAY(CDBGST1, 5) _CMT(" start of data block for track 1                    ")
    _OCTETARRAY(CDBGEN1, 5) _CMT(" end of data block for track 1                      ")
    _OCTETARRAY(CDBGENN, 5) _CMT(" end of data block for tracks 2 to 40               ")
    _OCTETARRAY(CHDR2ND, 5) _CMT(" second part of sector header block including filler")
    _OCTETDECL(P_STRCK)     _CMT(" start track parameter                              ")
    _OCTETDECL(P_ETRCK)     _CMT(" end track parameter (last track plus one)          ")
    _OCTETDECL(P_RETRY)     _CMT(" number of retries (per disk, not per track)        ")
    _OCTETDECL(P_DOBMP)     _CMT(" flag, if an initial head bump should be done       ")
    _OCTETDECL(P_DEMAG)     _CMT(" flag, if the disk should be demagnetized           ")
    _OCTETDECL(P_VRIFY)     _CMT(" flag, if the disk should be verified               ")
_ENDSTRUCT()

_CMT(" possible future extensions to the next generation formatter                 ")
_CMT("    * create the correct directory block pattern directly with the low       ")
_CMT("      level format routine (this doesn't include the BAM block)              ")
_CMT("    * host configurable cushioning option: by disabling the cushioning on    ")
_CMT("      direct driven disk drives, the sector distribution can be made much    ")
_CMT("      more precise (in other words: the difference between the inter sector  ")
_CMT("      GAP and the track tail GAP becomes less than with cushioning enabled)  ")
_CMT("    * host configurable 1571 disk drive fix option: by disabling the 1571    ")
_CMT("      fix the format process can be made a bit faster, ca. 0.3 seconds.      ")

_CMT("_OCTETARRAY(CDBGST8, 5)") _CMT(" start of data block for track 18 (directory track) ")
_CMT("_OCTETARRAY(CDBGEN8, 5)") _CMT(" end of data block for track 18 (directory track)   ")
_CMT("_OCTETDECL(P_CSHNG)")     _CMT(" flag, if the cushioning should be used             ")
_CMT("_OCTETDECL(P_71FIX)")     _CMT(" flag, if the 1571 format fix should be applied     ")
