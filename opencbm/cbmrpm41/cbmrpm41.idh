_CMT(" /*                                                                          ")
_CMT("  * cbmrpm41.o65 - 6502 based high precision 1541 rpm measurement            ")
_CMT("  *                                                                          ")
_CMT("  * Copyright (C) 2006 Wolfgang Moser (http://d81.de)                        ")
_CMT("  *                                                                          ")
_CMT("  * This program is free software; you can redistribute it and/or            ")
_CMT("  * modify it under the terms of the GNU General Public License              ")
_CMT("  * as published by the Free Software Foundation; either version             ")
_CMT("  * 2 of the License, or (at your option) any later version.                 ")
_CMT("  */                                                                         ")
_CMT("                                                                             ")
_CMT("                                                                             ")
_CMT(" Interface description header of the high precision 1541 rpm measurement     ")
_CMT(" tool, defining 3 byte triple of timer values and a symbolic description     ")
_CMT(" of all supported commands that are handled by a redirected user command     ")
_CMT(" table within the 1541 drive.                                                ")
_CMT("                                                                             ")
_CMT(" To include this file within a C or C++ source file, write a wrapper header  ")
_CMT(" file, copy over the following 28 lines and include it into your source:     ")
_CMT("                                                                             ")
_CMT("     #ifndef __CBMFORNG_INTERFACE_DESCFRIPTION_HEADER_INCLUDE_               ")
_CMT("     #define __CBMFORNG_INTERFACE_DESCFRIPTION_HEADER_INCLUDE_               ")
_CMT("                                                                             ")
_CMT("     #define _CMT(str)                                                       ")
_CMT("     #define _BEGINSTRUCT(parm)      struct parm {                           ")
_CMT("     #define _ENDSTRUCT()            };                                      ")
_CMT("     #define _OCTETARRAY(name, size) unsigned char name[size];               ")
_CMT("     #define _OCTETDECL(name)        unsigned char name;                     ")
_CMT("                                                                             ")
_CMT("     #define _BEGINENUM(parm)         enum parm {                            ")
_CMT("     #define _BEGIN_UX_ENUM(parm)     enum parm { ResetUxVectorTable = '0',  ")
_CMT("     #define _ENDENUM()               };                                     ")
_CMT("     #define _ENUMENTRY(asym,no,name) name = no,                             ")
_CMT("                                                                             ")
_CMT("     #include ''cbmrpm41.idh''                                               ")
_CMT("                                                                             ")
_CMT("     #undef _CMT                                                             ")
_CMT("     #undef _BEGINSTRUCT                                                     ")
_CMT("     #undef _ENDSTRUCT                                                       ")
_CMT("     #undef _OCTETARRAY                                                      ")
_CMT("     #undef _OCTETDECL                                                       ")
_CMT("                                                                             ")
_CMT("     #undef _BEGINENUM                                                       ")
_CMT("     #undef _BEGIN_UX_ENUM                                                   ")
_CMT("     #undef _ENDENUM                                                         ")
_CMT("     #undef _ENUMENTRY                                                       ")
_CMT("                                                                             ")
_CMT("     #endif                                                                  ")
_CMT("                                                                             ")
_CMT("                                                                             ")

_BEGINSTRUCT(Timer24bitValues)                                                   
    _OCTETDECL(V2T2__LOW)   _CMT(" 8 bits of Timer 2 from VIA 2, reload from latch ")
    _OCTETDECL(V1T2__LOW)   _CMT(" low byte from 16 bits Timer 2 of VIA 1          ")
    _OCTETDECL(V1T2_HIGH)   _CMT(" high byte from 16 bits Timer 2 of VIA 1         ")
_ENDSTRUCT()

_CMT(" declaration for a byte array of arbitrary size:   _OCTETARRAY(CDBGIMT, 5)   ")


_CMT(" Define the subroutine entry points as symbolic names that can be used from  ")
_CMT(" C language as a replacement for the Ux commands                             ")


_BEGIN_UX_ENUM(UcmdVectorNames)
        _CMT("                                             UA, U1 alternatively    ")
    _ENUMENTRY(UA, 'A' , ResetVIA2ShiftRegConfig)
        _CMT("                                             UB, U2 alternatively    ")
    _ENUMENTRY(UB, 'B' , Init23_BitTimersStd)
        _CMT("                                             UC, U3 alternatively    ")
    _ENUMENTRY(UC, 'C' , T2_23Bit_TimerSampling)

        _CMT("                                             UD, U4 alternatively    ")
    _ENUMENTRY(UD, 'D' , ExecuteJobInBuffer)
        _CMT("                                             UE, U5 alternatively    ")
    _ENUMENTRY(UE, 'E' , U5_UE_Uservector)

        _CMT("                                             UF, U6 alternatively    ")
    _ENUMENTRY(UF, 'F' , U6_UF_Uservector)
        _CMT("                                             UG, U7 alternatively    ")
    _ENUMENTRY(UG, 'G' , U7_UG_Uservector)
        _CMT("                                             UH, U8 alternatively    ")
    _ENUMENTRY(UH, 'H' , U8_UH_Uservector)

        _CMT("                                             UI, U9 alternatively    ")
    _ENUMENTRY(UI, 'I' , U9_UI_Uservector)
        _CMT("                                             UJ, U; alternatively    ")
    _ENUMENTRY(UJ, 'J' , Ux_UJ_Uservector)
        _CMT("                                             UK, U: alternatively    ")
    _ENUMENTRY(UK, 'K' , Ux_UK_Uservector)
        _CMT("                                             UL, U< alternatively    ")
    _ENUMENTRY(UL, 'L' , Ux_UL_Uservector)
        _CMT("                                             UM, U= alternatively    ")
    _ENUMENTRY(UM, 'M' , Ux_UM_Uservector)
        _CMT("                                             UN, U> alternatively    ")
    _ENUMENTRY(UN, 'N' , Ux_UN_Uservector)
        _CMT("                                             UO, U? alternatively    ")
    _ENUMENTRY(UO, 'O' , Ux_UO_Uservector)
_ENDENUM()
