_CMT(" /*                                                                          ")
_CMT("  * cbmrpm41.o65 - 6502 based high precision 1541 rpm measurement            ")
_CMT("  *                                                                          ")
_CMT("  * Copyright (C) 2006 Wolfgang Moser (http://d81.de)                        ")
_CMT("  *                                                                          ")
_CMT("  * This program is free software; you can redistribute it and/or            ")
_CMT("  * modify it under the terms of the GNU General Public License              ")
_CMT("  * as published by the Free Software Foundation; either version             ")
_CMT("  * 2 of the License, or (at your option) any later version.                 ")
_CMT("  */                                                                         ")
_CMT("                                                                             ")
_CMT("                                                                             ")
_CMT(" Interface description header of the high precision 1541 rpm measurement     ")
_CMT(" tool, defining 3 byte triple of timer values and a symbolic description     ")
_CMT(" of all supported commands that are handled by a redirected user command     ")
_CMT(" table within the 1541 drive.                                                ")
_CMT("                                                                             ")
_CMT(" To include this file within a C or C++ source file, write a wrapper header  ")
_CMT(" file, copy over the following 28 lines and include it into your source:     ")
_CMT("                                                                             ")
_CMT("     #ifndef __CBMRPM41_INTERFACE_DESCFRIPTION_HEADER_INCLUDE_               ")
_CMT("     #define __CBMRPM41_INTERFACE_DESCFRIPTION_HEADER_INCLUDE_               ")
_CMT("                                                                             ")
_CMT("     #include ''packon.h''                                                   ")
_CMT("     #define _CMT(        str         )                                      ")
_CMT("     #define _CONSTDECL(  name,value  ) typedef unsigned char name[value];   ")
_CMT("     #define _BEGINSTRUCT(name        ) struct name {                        ")
_CMT("     #define _ENDSTRUCT(              ) };                                   ")
_CMT("     #define _OCTETARRAY( name, size  ) unsigned char name[size];            ")
_CMT("     #define _OCTETDECL(  name        ) unsigned char name;                  ")
_CMT("                                                                             ")
_CMT("     #define _BEGINENUM(  name        ) enum name {                          ")
_CMT("     #define _ENDENUM(                ) };                                   ")
_CMT("     #define _ENUMENTRY(  name,value  ) name = value,                        ")
_CMT("                                                                             ")
_CMT("     #define _BEGIN_UXT(  name        ) enum name { ResetUxVectorTable = '0',")
_CMT("     #define _UX_EENTRY(  asym,no,name) name = no,                           ")
_CMT("                                                                             ")
_CMT("     #define _BEGINMACRO( name        ) struct name {                        ")
_CMT("     #define _ENDMACRO(               ) };                                   ")
_CMT("     #define _BEGLSCOPE(  name        ) struct name {                        ")
_CMT("     #define _ENDLSCOPE(  impl        ) } impl;                              ")
_CMT("     #define _TAGLJUMP(   name        ) unsigned char name[3];               ")
_CMT("     #define _TAGSTRUCT(  name, type  ) struct type name;                    ")
_CMT("     #define _TAGOCTET(   name, value ) unsigned char name;                  ")
_CMT("     #define _TAGSHORT(   name, value ) unsigned short name;                 ")
_CMT("                                                                             ")
_CMT("     #include ''cbmrpm41.idh''                                               ")
_CMT("                                                                             ")
_CMT("     #undef _CMT                                                             ")
_CMT("     #undef _CONSTDECL                                                       ")
_CMT("     #undef _BEGINSTRUCT                                                     ")
_CMT("     #undef _ENDSTRUCT                                                       ")
_CMT("     #undef _OCTETARRAY                                                      ")
_CMT("     #undef _OCTETDECL                                                       ")
_CMT("                                                                             ")
_CMT("     #undef _BEGINENUM                                                       ")
_CMT("     #undef _ENDENUM                                                         ")
_CMT("     #undef _ENUMENTRY                                                       ")
_CMT("                                                                             ")
_CMT("     #undef _BEGIN_UXT                                                       ")
_CMT("     #undef _UX_EENTRY                                                       ")
_CMT("                                                                             ")
_CMT("     #undef _BEGINMACRO                                                      ")
_CMT("     #undef _ENDMACRO                                                        ")
_CMT("     #undef _BEGLSCOPE                                                       ")
_CMT("     #undef _ENDLSCOPE                                                       ")
_CMT("     #undef _TAGLJUMP                                                        ")
_CMT("     #undef _TAGSTRUCT                                                       ")
_CMT("     #undef _TAGOCTET                                                        ")
_CMT("     #undef _TAGSHORT                                                        ")
_CMT("     #include ''packoff.h''                                                  ")
_CMT("                                                                             ")
_CMT("     #endif /* __CBMRPM41_INTERFACE_DESCFRIPTION_HEADER_INCLUDE_ */          ")

_CONSTDECL(cbmDev_UxCMDtVector,  0 *4096 +  0 *256 +  6 *16 + 11)   _CMT("  0x006b ")
_CONSTDECL(cbmDev_StartAddress,  0 *4096 +  3 *256 +  0 *16 +  0)   _CMT("  0x0300 ")

_BEGINSTRUCT(Timer24bitValues)                                                   
    _OCTETDECL(V2T2__LOW)   _CMT(" 8 bits of Timer 2 from VIA 2, reload from latch ")
    _OCTETDECL(V1T2__LOW)   _CMT(" low byte from 16 bits Timer 2 of VIA 1          ")
    _OCTETDECL(V1T2_HIGH)   _CMT(" high byte from 16 bits Timer 2 of VIA 1         ")
_ENDSTRUCT()

_CMT(" Define the subroutine entry points as symbolic names that can be used from  ")
_CMT(" C language as a replacement for the Ux commands                             ")

_BEGIN_UXT(UcmdVectorNames)
        _CMT("                                             UA, U1 alternatively    ")
    _UX_EENTRY(UA, 'A' , ResetVIA2ShiftRegConfig)
        _CMT("                                             UB, U2 alternatively    ")
    _UX_EENTRY(UB, 'B' , Init23_BitTimersStd)
        _CMT("                                             UC, U3 alternatively    ")
    _UX_EENTRY(UC, 'C' , T2_23Bit_ShootSample)

        _CMT("                                             UD, U4 alternatively    ")
    _UX_EENTRY(UD, 'D' , ExecuteJobInBuffer)


        _CMT("                                             UE, U5 alternatively    ")
    _UX_EENTRY(UE, 'E' , U5_UE_Uservector)
        _CMT("                                             UF, U6 alternatively    ")
    _UX_EENTRY(UF, 'F' , U6_UF_Uservector)
        _CMT("                                             UG, U7 alternatively    ")
    _UX_EENTRY(UG, 'G' , U7_UG_Uservector)
        _CMT("                                             UH, U8 alternatively    ")
    _UX_EENTRY(UH, 'H' , U8_UH_Uservector)
        _CMT("                                             UI, U9 alternatively    ")
    _UX_EENTRY(UI, 'I' , U9_UI_Uservector)
        _CMT("                                             UJ, U; alternatively    ")
    _UX_EENTRY(UJ, 'J' , Ux_UJ_Uservector)
        _CMT("                                             UK, U: alternatively    ")
    _UX_EENTRY(UK, 'K' , Ux_UK_Uservector)
        _CMT("                                             UL, U< alternatively    ")
    _UX_EENTRY(UL, 'L' , Ux_UL_Uservector)
        _CMT("                                             UM, U= alternatively    ")
    _UX_EENTRY(UM, 'M' , Ux_UM_Uservector)
        _CMT("                                             UN, U> alternatively    ")
    _UX_EENTRY(UN, 'N' , Ux_UN_Uservector)
        _CMT("                                             UO, U? alternatively    ")
    _UX_EENTRY(UO, 'O' , Ux_UO_Uservector)
_ENDENUM()

_CMT(" Memory layout for the data structures at the beginning of the execution     ")
_CMT(" buffer. This includes the job routine vector, 24 bit storage (2 times) and  ")
_CMT(" the table for the Ux command vectors.                                       ")

_BEGINMACRO(ExecBuffer_MemoryLayout)
	_TAGLJUMP(MeasurementJobCode)

	_TAGSTRUCT(Timer24BitGroup, Timer24bitValues)

	_BEGLSCOPE(CommandVectorsTable)
		_TAGSHORT(UA_impl, UA)
		_TAGSHORT(UB_impl, UB)
		_TAGSHORT(UC_impl, UC)
		_TAGSHORT(UD_impl, UD)
		_TAGSHORT(UE_impl, UE)
		_TAGSHORT(UF_impl, UF)
		_TAGSHORT(UG_impl, UG)
		_TAGSHORT(UH_impl, UH)
		_TAGSHORT(UI_impl, UI)
		_TAGSHORT(UJ_impl, UJ)
		_TAGSHORT(UK_impl, UK)
		_TAGSHORT(UL_impl, UL)
		_TAGSHORT(UM_impl, UM)
		_TAGSHORT(UN_impl, UN)
		_TAGSHORT(UO_impl, UO)
	_ENDLSCOPE(CommandVectorsTable_impl)
_ENDMACRO()
