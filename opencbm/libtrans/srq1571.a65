; Copyright      2020 Spiro Trikaliotis
; All rights reserved.
;
; This file is part of OpenCBM
;
;  This program is free software; you can redistribute it and/or
;  modify it under the terms of the GNU General Public License
;  as published by the Free Software Foundation; either version
;  2 of the License, or (at your option) any later version.


.if .defined(Drive1541)
.else
        Drive1571       = 1                     ;Compile for 1571 drives
.endif

        .include "common.i65"

        * = $0700

clklo = $e9ae
clkhi = $e9b7
datalo = $e9a5
datahi = $e99c
get_iec = $e9c0

setinput = $81b2
setoutput = $81ce

timer_counter = 1

get_ts     jmp gts         ; get track/sector
get_byte   jmp gbyte       ; get byte
get_block  jmp gblk        ; receive block
send_byte  jmp sbyte       ; send byte
send_block jmp sblk        ; send block

init

	; set 2 MHz
	lda VIA_BC_PA_NOHANDSHAKE
	ora #VIA_BC_PA_2MHZ	; 2 MHz mode
	sta VIA_BC_PA_NOHANDSHAKE

	lda #$7f
	sta CIA_ICR

	; set timer
	lda #>timer_counter
	ldx #<timer_counter
	sta CIA_TA_HI
	stx CIA_TA_LO

	jsr setinput

	jmp datahi	; signal: we are ready

; --------------------------------------------

sblk
	sei

	jsr setoutput

	jsr sbyte	; dummy send, needed by NIB protocol
	jsr datahi

	; wait for controller signalling 'ready to transfer' by setting CLK
:	jsr get_iec
	and #IEC_PORT_CLK_IN
	beq :-

	jsr setoutput

:
;	; check if controller signals 'end of transfer' by releasing CLK
;	jsr get_iec
;	and #IEC_PORT_CLK_IN
;	beq sblk_abort

	lda (ptr),y
	jsr sbyte_int
	iny
	bne :-

	jsr sbyte	; dummy send, needed by NIB protocol

	; wait for controller signalling 'end of transfer' by releasing CLK
:	jsr get_iec
	and #IEC_PORT_CLK_IN
	bne :-

sblk_abort:
	cli
	jmp setinput

sbyte_int
	sta CIA_SDR
	; FALL THROUGH

wait_srq_transfer_end:
	; wait for transfer to finish
	lda #8
:	bit CIA_ICR
	beq :-
	jmp clkhi
	; ------------------------


sbyte
	sei

	tax
	jsr wait_atn_set
	jsr setoutput
	txa

	jsr sbyte_int

	jsr wait_atn_clear
	cli
	jmp setinput

; ----------------------

wait_atn_set
	; wait for controller signalling 'ready to transfer' by setting ATN
	jsr get_iec
	and #IEC_PORT_ATN_IN
	beq wait_atn_set

	bit CIA_ICR	; clear transfer flag

	; clear ATNA ( =DATA), set CLK to signal we are ready to receive
	lda IEC_PORT
	ora #IEC_PORT_ATNA_OUT | IEC_PORT_CLK_OUT
	sta IEC_PORT

	rts

wait_atn_clear
	; wait for controller signalling 'transfer finished' by clearing ATN
	jsr get_iec
	and #IEC_PORT_ATN_IN
	bne wait_atn_clear

	; clear ATNA ( = DATA), clear CLK to signal we are not ready to receive
	lda IEC_PORT
	and # ~ (IEC_PORT_ATNA_OUT | IEC_PORT_CLK_OUT | IEC_PORT_DATA_OUT) & $FF
	sta IEC_PORT

	rts

gbyte
	sei
	jsr gbyte_int
	cli
	rts

gbyte_int
	jsr wait_atn_set
	jsr wait_srq_transfer_end
	jsr wait_atn_clear

	lda CIA_SDR			; get data byte
	rts

gts
	sei
	jsr gbyte_int
	tax
	jsr gbyte_int
	tay
	cli
	rts

gblk
	sei
:
	jsr gbyte_int
	sta (ptr),y
	iny
	bne :-
	cli
	rts
