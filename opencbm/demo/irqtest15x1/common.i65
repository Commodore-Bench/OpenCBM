; vim: set filetype=a65 noexpandtab tabstop=4 shiftwidth=4 autoindent smartindent:

CIA_BASE = $4000	; CIA base address

.struct CIA
	PRA  .byte
	PRB  .byte
	DDRA .byte
	DDRB .byte
	TA   .word
	TB   .word
	TODT .byte
	TODS .byte
	TODM .byte
	TODH .byte
	SDR  .byte
	ICR  .byte
	CRA  .byte
	CRB  .byte
.endstruct

.macro FillCount count
	.repeat count
		.byte 0
	.endrep
.endmacro

.macro FillUntil address
	FillCount address-*
.endmacro


;; -------------------------------------------------------------------------------
;; taken from: https://github.com/demesos/LAMAlib/blob/master/LAMAlib-macros16.inc
;; -------------------------------------------------------------------------------

;; ldax addr, ldax #arg
;; Loads a 16-bit value into A/X, either from an address or as immediate value
;; Note that the zero flag is not indicating 0 but indicating a value <256
;; Supports zero page addressing mode
;; Registers modified: A,X
.macro ldax arg
.scope
        .if (.match (.left (1, {arg}), #))
            ; immediate mode
	    iarg=(.right (.tcount ({arg})-1, {arg}))
            .if .const(iarg) .and (<iarg = >iarg)
               lda     #<iarg
               tax
            .else
               lda     #<iarg
               ldx     #>iarg
            .endif
        .else
            ; absolute or zero page
            lda arg
            ldx     1+(arg)
        .endif
.endscope
.endmacro

;; stax addr
;; Stores the value in registers A and X to addr and addr+1
;; Supports zero page addressing mode
;; Registers modified: none
.macro stax addr
.scope
        sta addr
        stx 1+(addr)
.endscope
.endmacro
