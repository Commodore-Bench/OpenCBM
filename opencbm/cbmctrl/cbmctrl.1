.\" $Id: cbmctrl.1,v 1.16 2006-07-23 20:55:32 wmsr Exp $
.\"
.\" This manual page was written by Michael Klein
.\"   <michael(dot)klein(at)puffin(dot)lb(dot)shuttle(dot)de>,
.\" additions and rework by Wolfgang Moser (http://d81.de),
.\" changes and corrections by Spiro Trikaliotis
.\"
.\" Process this file with
.\"    groff -t -e -mandoc -Tps cbmctrl.1 > cbmctrl.1.ps
.\" Test it with
.\"    nroff -man cbmctrl.1 | less -r
.\"
.TH CBMCTRL "1" "July 2006" "cbmctrl 0.4.x" "User Commands"
.SH NAME
cbmctrl \- control serial CBM devices \- manual page for cbmctrl 0.4.x
.P
.B This document is poorly maintained and probably outdated. 
If in doubt, use the Texinfo manual. If the
.B info
program is properly installed at your site, the command
.IP
.B info opencbm
.PP
should give you access to the complete manual.
.SH SYNOPSIS
.B cbmctrl "  [global_options] [action] [action_opt] [\-\-] [action_args]"
.SH DESCRIPTION
.B cbmctrl
can control all kinds of serial CBM devices like floppy drives and printers.
So far, it has been successfully tested with the disk drives
.SM 1541(-II),
.SM 1571
and a
.SM MPS-1200
printer.
.SH Structure
.SS Overall structure of cbmctrl actions
The overall format of all
.B cbmctrl
actions is:
.RS 2
.RS 2
.TP
.BI cbmctrl " [global_options]" " [action]" " [action_opt]" " [\-\-]" " [action_args]"
.RE
.TP 2
.BI cbmctrl
The name of the
.B cbmctrl
program
.TP 2
.I global_options
Some options that are related to
.B cbmctrl
in general or affect the overall behaviour of all actions
.TP 2
.B action
One of a bunch of different subcommands that direct
.B cbmctrl
what to do
.TP 2
.I action_opt
Options that are used and useful in the context of a dedicated
subcommand
.B action
only
.TP 2
.B \-\-
Optional delimiter between
.B action
.I options
and
.I arguments
to disable option parsing after (for arguments that begin with a
hyphen)
.TP 2
.I action_args
Arguments that are required for the subcommand
.B action
to work
.RE
.SH OPTIONS
.SS Global options
.B cbmctrl
understands the following global options
.PP
.PD 0
.RS 2
.TP 7
.B \-h
.I [<action>]
.TP 7
.B \-\-help
.I [<action>]
.RS
Outputs the help screen with a short listing of all available
actions. If the optional
.I <action>
name is given also, you retrieve more information on a specific
action together with its arguments and parameters
.RE
.PD
.TP
.B \-V, \-\-version
Output version information as well as the build date and time
.TP
.B \-p, \-\-petscii
Convert input or output parameters between CBM format (PETSCII)
and PC format (ASCII). This charset conversion is the default for
the actions:
.BR status " and" " dir" " (both on output strings)."
.TP
.B \-r, \-\-raw
Do not convert data between CBM and PC format. Not doing charset
conversion is the default for the actions:
.B open, command
(parameter names),
.B read, write
(input and output channels) and
.B put
(parameter)
.
.RE
.SS Actions overview
.B cbmctrl
understands the following subcommand actions
.RS 2
.TP 10
.B reset
\- Reset all drives on the IEC bus
.br
.ns
.TP 10
.B detect
\- Detect all drives on the IEC bus
.br
.ns
.TP 10
.B lock
\- Lock the parallel port for cbm4win/cbm4linux use
.br
.ns
.TP 10
.B unlock
\- Unlock the parallel port from exclusive usage
.br
.ns
.TP 10
.B listen
\- Perform a listen on the IEC bus
.br
.ns
.TP 10
.B talk
\- Perform a talk on the IEC bus
.br
.ns
.TP 10
.B unlisten
\- Perform an unlisten on the IEC bus
.br
.ns
.TP 10
.B untalk
\- Perform an untalk on the IEC bus
.br
.ns
.TP 10
.B open
\- Perform an open on the IEC bus
.br
.ns
.TP 10
.B close
\- Perform a close on the IEC bus
.br
.ns
.TP 10
.B read
\- Get a stream of raw data from an IEC bus device
.br
.ns
.TP 10
.B write
\- Write a stream of raw data to an IEC bus device
.br
.ns
.TP 10
.B put
\- Put the specified data to an IEC bus device
.br
.ns
.TP 10
.B status
\- Give the status of a specified drive
.br
.ns
.TP 10
.B command
\- Issue a command to a specified drive
.br
.ns
.TP 10
.B dir
\- Output the directory of a disk in a specified drive
.br
.ns
.TP 10
.B download
\- Download memory contents from a floppy drive
.br
.ns
.TP 10
.B upload
\- Upload memory contents to a floppy drive
.br
.ns
.TP 10
.B change
\- Wait for a disk to be changed in a specified drive
.RE
.PP
.B cbmctrl
yet supports these deprecated subcommand actions
.RS 2
.TP 10
.B popen
\- Same as open, but with ASCII to PETSCII conversion
.br
.ns
.TP 10
.B pcommand
\- Same as command, with ASCII to PETSCII conversion
.RE
.SS Common action options
Some of
.B cbmctrl's
actions understand the following subcommand options:
.PP
.PD 0
.RS 2
.TP
.B \-e, \-\-extended
Some actions require string arguments that either denote a filename
or command sequences on IEC devices. If this option is given on the
appropriate subcommand actions, an extended format is used for such
strings:
.RS
You can specify extra characters by giving their value in hex with
prepended '%', that is: "%20" => SPACE, "%41" => 'A', "%35" => '5',
and so on; this is the so named percent-encoding as specified for
URIs in RFC 3986. A '%' is given by encoding it with: "%25" => '%'.
.RE
.RE
.PD
.SS Common action arguments
Many of the
.B cbmctrl
subcommands understand the following common arguments:
.TP 2
.I <device>
Advice
.B cbmctrl
to direct its communication to the IEC bus device with the number
.I <device>.
IEC bus device numbers can be denoted in the range from 0 to 30,
although no Commodore device is known to use device numbers 0 to 3.
Most commonly used are the numbers 4 (printer) and 8 to 11 (disk
drives). Device number 31 is used to denote the UNTALK respectively
the UNLISTEN command code on the IEC bus instead of the TALK
respectively LISTEN command code, therefore device address 31
cannot be used in general.
.TP
.I <secadr>
With several
.B cbmctrl actions
the secondary address parameter
.I <secadr>
denotes a dedicated logical communication channel for the specified
.IR <device> .
IEC bus channel numbers can be denoted in the range from 0 to 15.
Take note that for floppy disk drive devices some secondary
addresses are interpreted in a special way. Secondary address 0
is used, when a program is loaded, address 1, when a program is
saved. Address number 15 represents the command channel of the
disk drive, so effectively, for bulk data transfers to and from
disk drives, only the logical channel numbers 2 to 14 can be used.
.TP
.IR "<filename>" "," " <cmdstr>" "," " <datstr>" 
With several
.B cbmctrl actions
there is an argument required that either denotes a filename via
.I <filename>
at the IEC device, calls a command via
.I <cmdstr>
over the IEC bus that the device is able to interprete or sends
native data denoted by
.I <datstr>
to a previously defined channel. Any such argument that denotes a
string within or for an IEC device is subject to optional
ASCII<\->PETSCII conversions as well as optional percent-encodings
with selected actions.
.SS Actions
.B cbmctrl
understands the following
.B actions:
.TP 2
.BI reset
This action performs a hardware reset of all devices attached to the IEC bus.
Control is returned after it is made sure that all devices are ready.
.TP
.BI detect 
This action tries to detect all devices attached to the IEC bus.
For this, this subcommand accesses all possible devices and tries to
read some bytes from its memory. If a devices is detected, its name
is printed to the console. Additionally, this routine determines if
the device is connected via a parallel cable (XP1541 companion cable,
may be true for disk drives only).
.TP
.BI lock
This command locks the parallel port for exclusive use by cbm4win/cbm4linux, so
that sequences of e.g. talk/read/untalk commands are not broken by concurrent
processes wanting to access the parallel port.
.RS
.PP
Best practice is it to enclose each such sequence that contains either talk,
untalk, listen, unlisten, open, close, read or write by a lock/unlock pair of
commands. Scripting systems or other software systems using cbmctrl instead of
the OpenCBM API should issue a 
.B cbmctrl lock
command on startup and a
.B cbmctrl unlock
upon (each) exit.
.RE
.TP
.BI unlock
Ends exclusive parallel port access by opencbm so that other
processes are allowed to access the parallel port.
.TP
.BI listen " <device> <secadr>"
Tell device
.I <device>
to listen on secondary address
.IR <secadr> .
Until the next
.B unlisten
command, everything written with the action command
.B write
(see below) will be received by this device. Take note that a
.B listen
command has to be undone later with an
.B unlisten
(see below) command.
.RS
.PP
This command corresponds to the following 6502 assembler code on a C64:
.RS
.PD 0
.P
lda #dev
.P
jsr $ffb1
.P
lda #sa
.P
ora #$60
.P
jsr $ff93
.PD
.RE
.RE
.TP
.BI talk " <device> <secadr>"
Tell device
.I <device>
to talk on secondary address
.IR <secadr> .
Until the next
.B untalk
command, data from this device can be received by reading with the
action command
.B read
(see below). Take note that a
.B talk
command has to be undone later with an
.B untalk
(see below) command.
.RS
.PP
This command corresponds to the following 6502 assembler code on a C64:
.RS
.PD 0
.P
lda #dev
.P
jsr $ffb4
.P
lda #sa
.P
ora #$60
.P
jsr $ff96
.PD
.RE
.RE
.TP
.BI unlisten
Ends communication with listening devices by undoing one or more
previous
.B listen
or
.B talk
commands. This IEC command affects all devices on the bus; it
corresponds to the C64 kernel routine $ffae.
.TP
.BI untalk
Ends communication with talking devices by undoing one or more
previous
.B listen
or
.B talk
commands. This IEC command affects all devices on the bus; it
corresponds to the C64 kernel routine $ffab.
.TP
.BI open " [\-e|\-\-extended]" " <device> <secadr>" " <filename> [<file1> ... <fileN>]"
Open file
.I <filename>
appended by the optional octets
.I <file1>
to
.I <fileN>
on device
.IR <device> .
After opening, data can be read/written by sending a
.B talk
respectively
.B listen
command with secondary address
.IR <secadr> .
Take note that an
.B open
command has to be undone later with a
.B close
command. The single byte arguments
.I <file1>
to
.I <fileN>
can either be given in decimal, octal (0 prefix) or sedecimal (0x
prefix) notation.
.PP
.RS 2
.PD 0
Notes:
.RS 2
.TP 2
*
If
.I <secadr> 
is greater than 1, file type and access mode must also be specified
by appending 
.I """,<type>,<mode>"""
to
.IR <filename> .
Valid types are
.BR D ,
.BR P ,
.BR S ,
.BR U
and 
.B R
(del, prg, seq, usr, rel), valid modes are 
.B R
for reading and
.B W
for writing.
.TP 2
*
If
.I \-\-raw
is used (this is the default), you should give the file type and
access mode in upper-case letters, lower case will
.B not
work! If
.I \-\-petscii
is used, you should give the file type and access mode letters in
lower case or they will not be interpreted correctly with most IEC
devices.
.TP 2
*
You cannot do an open without a filename. Although a CBM machine
(i.e., a C64) allows this, it is an internal operation to that
computer only.
.TP 2
*
.BI cbmctrl " open"
does not change any character encoding by default, that is, it
does not convert between ASCII (used by the PC) and PETSCII (used
by the CBM device). If this is needed, make use of the global
.I \-\-petscii
option.
.TP 2
*
If used with the global
.I \-\-petscii
option, this action is equivalent to the deprecated
.BR cbmctrl " action"
.BI "pcommand" " <device> <cmdstr>".
.TP 2
*
The octets given by
.I <file1> ... <fileN>
are
.B not
converted at all, regardless if the
.I \-\-petscii
global option is given or else.
.TP 2
*
The same goes for percent-encoded characters, when the options
.IR \-\-petscii " and" " \-\-extended"
are given. The resulting octets after the percent-decoding are
.B not
converted from ASCII to PETSCII.
.RE
.PD
.RE
.TP 2
.BI close " <device> <secadr>"
Close the file associated with secondary address
.I <secadr>
on device
.IR <device> .
This undoes a previous
.BR open " or" " popen"
command.
.TP
.BI read " [<file>]"
Reads raw data from a device, after it has been set into
.B talk
mode. The data stream may be stored into a file named by
the optional parameter
.IR <file> .
If
.I <file>
is omitted or if it is named '\-', the data stream is put to
the standard output channel on the host computer.
.TP
.BI write " [<file>]"
Writes raw data to a device, after it has been set into
.B listen
mode. The data stream may be taken from a file named by
the optional parameter
.IR <file> .
If
.I <file>
is omitted or if it is named '\-', the data stream is get from
the standard input channel on the host computer.
.TP
.BI put " [\-e|\-\-extended] <datstr> [<dat1> ... <datN>]"
Puts
.I <datstr>
appended by the optional octets
.I <dat1>
to
.I <datN>
to a device, after it has been set into
.B listen
mode. The single byte arguments
.I <dat1>
to
.I <datN>
can either be given in decimal, octal (0 prefix) or sedecimal (0x
prefix) notation.
.PP
.RS 2
.PD 0
Notes:
.RS 2
.TP 2
*
The octets given by
.I <dat1> ... <datN>
are
.B not
converted at all, regardless if the
.I \-\-petscii
global option is given or else.
.TP 2
*
The same goes for percent-encoded characters, when the options
.IR \-\-petscii " and" " \-\-extended"
are given. The resulting octets after the percent-decoding are
.B not
converted from ASCII to PETSCII.
.RE
.PD
.RE
.TP 2
.BI status " <device>"
Copies input from device
.IR <device> ,
secondary address 15 (command/status channel), to standard out. Note that
all upper case characters are changed to lower case. Carriage return (0x0d)
is also changed to the current operating systems line ending convention
(0x0a on Unix oriented systems, 0x0d 0x0a on Windows oriented systems).
.PP
.RS 2
This action is similar to (in this case, no character conversions would be
made as with using the
.B status
action with the global
.I \-\-raw
option):
.PP
.PD 0
.RS
cbmctrl lock
.P
cbmctrl talk
.I <device>
15
.P
cbmctrl read
.P
cbmctrl untalk
.P
cbmctrl unlock
.PD
.RE
.RE
.TP 2
.BI command " [\-e|\-\-extended]" " <device>" " <cmdstr> [<cmd1> ... <cmdN>]"
Sends
.I <cmdstr>
appended by the optional octets
.I <cmd1>
to
.I <cmdN>
to device
.BR <device> ,
secondary address 15 (command/status channel). The single byte
arguments
.I <cmd1>
to
.I <cmdN>
can either be given in decimal, octal (0 prefix) or sedecimal (0x
prefix) notation.
.RS
This command is identical to:
.PP
.PD 0
.RS 7
cbmctrl lock
.P
cbmctrl listen
.I <device>
15
.P
cbmctrl put
.I <cmdstr> [<cmd1> ... <cmdN>]
0x0d
.P
cbmctrl unlisten
.P
cbmctrl unlock
.PD
.P
.RE
.PD 0
Notes:
.RS 2
.TP 2
*
If
.I \-\-raw
is used (this is the default), you should give the commands in
upper-case letters, lower case will
.B not
work! If
.I \-\-petscii
is used, you should give the commands in lower case or they will
not be interpreted with most IEC devices.
.TP 2
*
If used with the global
.I \-\-petscii
option, this action is equivalent to the deprecated
.BR cbmctrl " action"
.BI "pcommand" " <device> <cmdstr>".
.TP 2
*
The octets given by
.I <cmd1> ... <cmdN>
are
.B not
converted at all, regardless if the
.I \-\-petscii
global option is given or else.
.TP 2
*
The same goes for percent-encoded characters, when the options
.IR \-\-petscii " and" " \-\-extended"
are given. The resulting octets after the percent-decoding are
.B not
converted from ASCII to PETSCII.
.PD
.RE
.RE
.TP 2
.BI dir " <device>"
Display the directory from the disk in the specified disk drive
IEC device
.IR <device> .
.TP
.BI download " <device> <address> <count> [<file>]"
Read
.I <count>
bytes from a disk drive's memory, starting at
.I <address>
via one or more
.BI """M-R"""
commands. Memory contents are written to standard output as long as
.I <file>
is ommited or denoted by '\-'. Note that
.I <count>
and
.I <address>
accept decimal as well as sedecimal (hexadecadic) numbers when
prefixed with 0x or 0X (but not with the usual $ sign).
.TP
.BI upload " <device> <address> [<file>]"
Send
.I <file>
to drive memory, starting at
.I <address>
via one or more
.BI """M-W"""
commands. If
.I <address>
is \-1, the first two bytes from
.I <file>
are considered as start address. Reads standard input if
.I <file>
is ommited or denoted by '\-'.
.I <count>
and
.I <address>
accept decimal as well as hex numbers (with 0x or 0X prefix).
.TP
.BI change " <device>"
This action advises a disk drive IEC device with number
.I <device>
to wait for a disk to be exchanged. It makes the following assumptions
for this:
.PP
.PD 0
.RS 4
.TP 2
*
there is already a disk in the drive,
.TP 2
*
that disk will be completely removed and replaced by another disk,
.TP 2
*
we do not want to return from this command until the disk is
completely inserted and ready to be read/written.
.PD
.RE
.PP
.RS 2
Because of this, just opening the drive and closing it again (without
actually removing the disk) will not work in most cases.
.RE
.RE
.PP
.B cbmctrl
still supports the following deprecated
.B actions:
.\" .RS 4
.TP 2
.BI popen " <device> <secadr> <filename>"
The
.B popen
action got obsoleted by the (full) command:
.RS 2
.BI cbmctrl " \-\-petscii" " open" " <device> <secadr> <filename>"
.RE
.TP 2
.BI pcommand " <device> <cmdstr>"
The
.B pcommand
action got obsoleted by this (full) command:
.RS 2
.BI cbmctrl " \-\-petscii" " command" " <device> <cmdstr>"
.\" .RE
.SH EXIT CODES
.B cbmctrl
sets the exit code to 0, if the operation completed successfully.
It exits with 2 if the command parser detected a failure condition
with the number of arguments, their size or the combination of
commands and options.
.PP
Take note that each command action does return its own exit codes
(mostly 0 for success and 1 as a failure indicator). The exact
exit code, especially when looking to failure conditions, is
platform and implementation (driver) specific, because operation
system specific error codes are used often.
.SH BUGS
The
.B lock/unlock
actions are currently without any functionality within the cbm4linux
driver. They can be issued without any drawback, but actually the
parallel port becomes not explicitly locked/unlocked to the driver.
That way scripts containing
.B lock/unlock
commands can be ported from Windows to Linux without changes. The
same goes for Windows, if the driver is installed in a way so that
the parallel port gets locked to the OpenCBM driver all the time.
In this case too the commands
.BR lock " and" " unlock"
can be issued with no drawbacks.
.PP
When commands are sent to the floppy with the
.B command
action, there is always a "\\r" appended at the end of the
command string by
.B cbmctrl.
This is done explicitly, because some IEC devices expect that
"\\r" in certain circumstances. Otherwise rather incomplete
commands could be send which may cause unexpected behaviour.
.SH EXAMPLES
.TP
Send file contents to printer #4:
.RS
.PD 0
cbmctrl lock
.P
cbmctrl listen 4 0
.P
cbmctrl write
.I filename
.P
cbmctrl unlisten
.P
cbmctrl unlock
.PD
.RE
.TP
Copy file to disk drive #8:
.RS
.PD 0
cbmctrl lock
.P
cbmctrl open 8 2
.IR CBMNAME ,P,W
.P
cbmctrl listen 8 2
.P
cbmctrl write
.I filename
.P
cbmctrl unlisten
.P
cbmctrl close 8 2
.P
cbmctrl unlock
.PD
.RE
.TP
Copy file from disk drive #8:
.RS
.PD 0
cbmctrl lock
.P
cbmctrl open 8 2
.IR CBMNAME ,P,R
.P
cbmctrl talk 8 2
.P
cbmctrl read
.I filename
.P
cbmctrl untalk
.P
cbmctrl close 8 2
.P
cbmctrl unlock
.PD
.RE

.TP
Switch device ID:
Write the bytes $29, $49 into memory locations $0077 and $0078 of
drive 8, which alters the drive's setup to recognize commands as
device 9 further on:
.PP
.RS
cbmctrl \-p command 8 m-w 119 0 2 41 73
.PP
.RS 2
or, alternatively via partial percent-encoding and without PETSCII
translation:
.RE
.PP
cbmctrl command \-e 8 M-W%77%00 2 0x29 0x49
.RE
.TP
Download the #9 disk drive DOS ROM to file:
.RS
cbmctrl download 9 0xc000 0x4000
.I 1541ROM.BIN
.RE
.TP
Transfer file to disk drive #10, buffer at address $500:
.RS
ASCII to PETSCII conversion is included for transferring true text
data into e.g. databases with relative files via direct block
access.
.PP
cbmctrl --petscii upload 10 0x500
.I BUFFER2.BIN
.RE
.SH AUTHOR
Michael Klein <michael(dot)klein(at)puffin(dot)lb(dot)shuttle(dot)de>,
additions and rework by Spiro Trikaliotis, additions by Wolfgang Moser
http://d81.de.
.SH DATE
July 23 2006 \" Happy birthday Martin ;-)
